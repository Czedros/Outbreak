SIX mode for resources for MCTS:

1. A lot of resources:
    a. a lot of food/water
    b. a lot of AP 
2. Mid amount of resources:
    a. mid of food/water
    b. mid of AP 
3. Low amount of resources:
    a. low of food/water
    b. low of AP 

Can merge into THREE mode for resources:
1. A lot of resources:

2. Mid amount of resources:

3. Low amount of resources:


- Day & Night Cycle Constant 

MCTS: 
# main function for the Monte Carlo Tree Search
#the starting parameter is the human's first position? root = human first position
  def monte_carlo_tree_search(root):
     
    while resources_left(time, computational power):
        
        leaf = traverse(root) #SELECTION: returns a node with the most promise to explore
        simulation_result = rollout(leaf) #EXPANSION and SIMULATION  
        backpropagate(leaf, simulation_result)#BACKPROPAGATION it 
         
    return best_child(root)
 
# function for node traversal
def traverse(node):
    while fully_expanded(node): #until reach a leaf node
        node = best_uct(node) # UCT chose best node
         
    # in case no children are present  / node is terminal just pick another unvisited node and try again
    return pick_unvisited(node.children) or node  
 
# function for the result of the simulation
#multiple simulations are 'rolled out'
def rollout(node):
    while non_terminal(node): #while not terminal
        node = rollout_policy(node) #pick a random child from that node
    return result(node) #return terminal node
 
# function for randomly selecting a child node
def rollout_policy(node):
    return pick_random(node.children)
 
# function for backpropagation; easiest to understand 
def backpropagate(node, result):
    if is_root(node) return #base case 
    node.stats = update_stats(node, result) #at this node, update it based on our results
    backpropagate(node.parent) #go backwards to its parent thats all
 
# function for selecting the best child
# node with highest number of visits 
def best_child(node):
    pick child with highest number of visits

#

